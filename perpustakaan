import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Date;

public class LibraryManagement {
    private static List<Buku> daftarBuku = new ArrayList<>();
    private static List<TransaksiPeminjaman> transaksiPeminjaman = new ArrayList<>();
    private static Admin admin;
    private static AnggotaPerpustakaan anggota;

    public static void main(String[] args) {
        // Inisialisasi buku
         boolean exit = false;
        daftarBuku.add(new Buku("The Alchemist", "Paulo Coelho", "9780061122415"));
        daftarBuku.add(new Buku("To Kill a Mockingbird", "Harper Lee", "9780061122415"));
        daftarBuku.add(new Buku("1984", "George Orwell", "9780451524935"));

        // Inisialisasi admin dan anggota perpustakaan
        admin = new Admin("admin", "adminpass");
        anggota = new AnggotaPerpustakaan("john", "userpass");
while (!exit) {
        // Login
        Scanner scanner = new Scanner(System.in);
        System.out.println("Masukkan username:");
        String username = scanner.nextLine();
        System.out.println("Masukkan password:");
        String password = scanner.nextLine();

       if (username.equals(admin.getUsername()) && password.equals(admin.getPassword())) {
                exit = adminMenu();
            } else if (username.equals(anggota.getUsername()) && password.equals(anggota.getPassword())) {
                exit = anggotaMenu();
            } else {
                System.out.println("Username atau password salah.");
            }
        }
    }

private static boolean adminMenu() {
    Scanner scanner = new Scanner(System.in);
    int choice;
    boolean exitAdminMenu = false; // Variabel baru untuk menentukan keluar dari menu admin
    do {
            System.out.println("Menu Admin:");
            System.out.println("1. Tambah Buku");
            System.out.println("2. Lihat Transaksi Peminjaman");
            System.out.println("3. lihat Daftar Buku");
            System.out.println("0. Keluar");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    tambahBuku();
                    break;
                case 2:
                    TransaksiPeminjaman();
                    break;
                case 3:
                    lihatDaftarBuku();
                break;
                case 0:
                    System.out.println("Keluar dari Menu Admin.");
                    break;
                default:
                    System.out.println("Pilihan tidak valid.");
                    break;
            }
        }  while (!exitAdminMenu && choice != 0); // Modifikasi kondisi loop

    return exitAdminMenu; // Kembali ke menu login jika true
}

    private static boolean anggotaMenu() {
        Scanner scanner = new Scanner(System.in);
        int choice;
        do {
            System.out.println("Menu Anggota:");
            System.out.println("1. Cari Buku");
            System.out.println("2. Pinjam Buku");
            System.out.println("3. Kembalikan Buku");
            System.out.println("0. Keluar");
                  choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    cariBuku();
                    break;
                case 2:
                    pinjamBuku();
                    break;
                case 3:
                    kembalikanBuku();
                    break;
                case 0:
                    System.out.println("Keluar dari Menu Anggota.");
                    return false; // Kembali ke menu login
                default:
                    System.out.println("Pilihan tidak valid.");
                    break;
            }
        } while (choice != 0);
        return true; // Kembali ke menu login
    }
    private static void lihatDaftarBuku() {
    System.out.println("Daftar Buku:");
    if (daftarBuku.isEmpty()) {
        System.out.println("Belum ada buku yang terdaftar.");
    } else {
        for (Buku buku : daftarBuku) {
            System.out.println("Judul: " + buku.getJudul());
            System.out.println("Pengarang: " + buku.getPengarang());
            System.out.println("ISBN: " + buku.getIsbn());
            System.out.println("Status Ketersedia: " + (buku.isStatusKetersedia() ? "Tersedia" : "Tidak tersedia"));
            System.out.println();
        }
    }
}

    private static void tambahBuku() {
        // Logic untuk menambahkan buku ke daftarBuku
        System.out.println("Masukkan judul buku:");
        Scanner scanner = new Scanner(System.in);
        String judul = scanner.nextLine();
        System.out.println("Masukkan nama pengarang:");
        String pengarang = scanner.nextLine();
        System.out.println("Masukkan ISBN:");
        String isbn = scanner.nextLine();

        daftarBuku.add(new Buku(judul, pengarang, isbn));
        System.out.println("Buku berhasil ditambahkan.");
    }

    private static void TransaksiPeminjaman() {
    System.out.println("Daftar Transaksi Peminjaman:");
    if (transaksiPeminjaman.isEmpty()) {
        System.out.println("Belum ada transaksi peminjaman.");
    } else {
        for (TransaksiPeminjaman transaksi : transaksiPeminjaman) {
            System.out.println("ID Transaksi: " + transaksi.getIDTransaksi());
            System.out.println("Anggota: " + transaksi.getAnggota());
            System.out.println("Buku: " + transaksi.getBuku());
            System.out.println("Tanggal Peminjaman: " + transaksi.getTanggalPeminjaman());
            System.out.println("Durasi: " + transaksi.getDurasi() + " hari");
            System.out.println();
        }
    }
}


    private static void cariBuku() {
        // Logic untuk mencari buku dalam daftarBuku
        System.out.println("Masukkan judul buku yang ingin dicari:");
        Scanner scanner = new Scanner(System.in);
        String judul = scanner.nextLine();

        boolean found = false;
        for (Buku buku : daftarBuku) {
            if (buku.getJudul().equalsIgnoreCase(judul)) {
                found = true;
                System.out.println("Buku ditemukan: " + buku.getJudul());
                break;
            }
        }

        if (!found) {
            System.out.println("Buku tidak ditemukan.");
        }
    }

    private static void pinjamBuku() {
        // Logic untuk meminjam buku dari daftarBuku
        System.out.println("Masukkan judul buku yang ingin dipinjam:");
        Scanner scanner = new Scanner(System.in);
        String judul = scanner.nextLine();

        boolean found = false;
        for (Buku buku : daftarBuku) {
            if (buku.getJudul().equalsIgnoreCase(judul)) {
                found = true;
                if (buku.isStatusKetersedia()) {
                    buku.setStatusKetersedia(false);
                    System.out.println("Buku '" + buku.getJudul() + "' berhasil dipinjam.");
                    TransaksiPeminjaman transaksi = new TransaksiPeminjaman(generateIDTransaksi(), anggota.getUsername(), buku.getJudul(), new Date(), 4);
                    transaksiPeminjaman.add(transaksi);
                } else {
                    System.out.println("Buku '" + buku.getJudul() + "' sedang tidak tersedia.");
                }
                break;
            }
        }

        if (!found) {
            System.out.println("Buku tidak ditemukan.");
        }
    }

    private static void kembalikanBuku() {
        // Logic untuk mengembalikan buku yang dipinjam
        System.out.println("Masukkan judul buku yang ingin dikembalikan:");
        Scanner scanner = new Scanner(System.in);
        String judul = scanner.nextLine();

        for (TransaksiPeminjaman transaksi : transaksiPeminjaman) {
            if (transaksi.getAnggota().equals(anggota.getUsername()) && transaksi.getBuku().equalsIgnoreCase(judul)) {
                transaksiPeminjaman.remove(transaksi);
                for (Buku buku : daftarBuku) {
                    if (buku.getJudul().equalsIgnoreCase(judul)) {
                        buku.setStatusKetersedia(true);
                        System.out.println("Buku '" + judul + "' berhasil dikembalikan.");
                        break;
                    }
                }
                return;
            }
        }
        System.out.println("Anda belum meminjam buku '" + judul + "'.");
    }

    private static String generateIDTransaksi() {
        // Logic untuk generate ID transaksi
        // Anda dapat mengimplementasikan logika yang sesuai untuk pembuatan ID transaksi di sini
        return "TRX" + (transaksiPeminjaman.size() + 1);
    }
}

class Buku {
    private String judul;
    private String pengarang;
    private String isbn;
    private boolean statusKetersedia;

    public Buku(String judul, String pengarang, String isbn) {
        this.judul = judul;
        this.pengarang = pengarang;
        this.isbn = isbn;
        this.statusKetersedia = true;
    }
public String getJudul() {
        return judul;
    }

    public String getPengarang() {
        return pengarang;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isStatusKetersedia() {
        return statusKetersedia;
    }

    public void setStatusKetersedia(boolean statusKetersedia) {
        this.statusKetersedia = statusKetersedia;
    }
}

class AnggotaPerpustakaan {
    private String username;
    private String password;

    public AnggotaPerpustakaan(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}

class Admin {
    private String username;
    private String password;

    public Admin(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}

class TransaksiPeminjaman {
    private String IDTransaksi;
    private String anggota;
    private String buku;
    private Date tanggalPeminjaman;
    private int durasi;

    public TransaksiPeminjaman(String IDTransaksi, String anggota, String buku, Date tanggalPeminjaman, int durasi) {
        this.IDTransaksi = IDTransaksi;
        this.anggota = anggota;
        this.buku = buku;
        this.tanggalPeminjaman = tanggalPeminjaman;
        this.durasi = durasi;
    }

    public String getIDTransaksi() {
        return IDTransaksi;
    }

    public String getAnggota() {
        return anggota;
    }

    public String getBuku() {
        return buku;
    }

    public Date getTanggalPeminjaman() {
        return tanggalPeminjaman;
    }

    public int getDurasi() {
        return durasi;
    }
}

